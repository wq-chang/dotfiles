#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK

import argparse
import json
import os
import subprocess
import sys

import argcomplete

deps_file = f"{os.path.expanduser('~')}/dotfiles/deps-lock.json"
actions = ["add", "update", "delete"]


def get_latest_rev(url, branch=None):
    command = " ".join(
        [
            "git",
            "ls-remote",
            url,
            f"refs/heads/{branch}" if branch else "| rg -e 'refs/heads/(main|master)$'",
        ]
    )
    output = subprocess.check_output(command, shell=True, text=True)
    output_parts = output.split()
    latest_commit_rev = output_parts[0]
    branch_ref = output_parts[1].split("/")[-1]

    return latest_commit_rev, branch_ref


def get_hash(url, branch, rev, sparse_checkout):
    has_sparse_checkout = 1 if sparse_checkout else 0
    command = ["nurl", url, rev, "-f", "fetchgit", "-A", "branchName", branch]
    if has_sparse_checkout == 1:
        sparse_checkout_str = "["
        for sc in sparse_checkout:
            sparse_checkout_str += f'"{sc}"'
        sparse_checkout_str += "]"
        command.append("-a")
        command.append("sparseCheckout")
        command.append(sparse_checkout_str)

    try:
        output = subprocess.check_output(command, text=True)
    except subprocess.CalledProcessError as e:
        print("Command:", " ".join(command))
        print("Error:", e)
        sys.exit()

    lines = output.strip().split("\n")
    hash = lines[-3 - has_sparse_checkout].split(" ")[-1][1:-2]
    return hash


def add_dependency(args):
    name = args.name
    url = args.url
    branch = args.branch
    sparse_checkout = args.sparse_checkout
    rev = args.rev

    if not rev or not branch:
        latest_rev, branch_ref = get_latest_rev(url, branch)
        if not rev:
            rev = latest_rev
        branch = branch_ref

    hash = get_hash(url, branch, rev, sparse_checkout)

    with open(deps_file, "r") as file:
        data = json.load(file)
    data[name] = {
        "url": url,
        "branchName": branch,
        "rev": rev,
        "hash": hash,
    }
    if sparse_checkout:
        data[name]["sparseCheckout"] = sparse_checkout

    with open(deps_file, "w") as file:
        sorted_data = dict(sorted(data.items()))
        json.dump(sorted_data, file, indent=2)

    print(f"Dependency {name} added successfully!")


def update_dependencies(_):
    with open(deps_file, "r") as file:
        data = json.load(file)

    for item in data:
        url = data[item]["url"]
        branch = data[item]["branchName"]
        rev = data[item]["rev"]
        latest_rev, _ = get_latest_rev(url, branch)
        hash = data[item]["hash"]

        if rev == latest_rev and hash != "":
            continue

        sparse_checkout = (
            data[item]["sparseCheckout"] if "sparseCheckout" in data[item] else None
        )
        hash_value = get_hash(url, branch, latest_rev, sparse_checkout)
        data[item]["rev"] = latest_rev
        data[item]["hash"] = hash_value

    with open(deps_file, "w") as file:
        sorted_data = dict(sorted(data.items()))
        json.dump(sorted_data, file, indent=2)

    print("Dependencies' hash and rev updated successfully!")


def main():
    parser = argparse.ArgumentParser(description="Manage Nix dependency")
    subparsers = parser.add_subparsers(dest="action", help="Choose an action")

    parser_add = subparsers.add_parser("add", help="Add dependency")
    parser_add.add_argument("name", type=str, help="Dependency name")
    parser_add.add_argument("url", type=str, help="Dependency url")
    parser_add.add_argument("-b", "--branch", type=str, help="Branch name")
    parser_add.add_argument("-r", "--rev", type=str, help="Rev")
    parser_add.add_argument(
        "-s", "--sparse-checkout", nargs="+", type=str, help="Sparse checkout"
    )
    parser_add.set_defaults(func=add_dependency)

    parser_update = subparsers.add_parser("update", help="Update all dependencies")
    parser_update.set_defaults(func=update_dependencies)

    argcomplete.autocomplete(parser)
    args = parser.parse_args()
    if "func" in args:
        args.func(args)
    else:
        parser.print_help()


if __name__ == "__main__":
    main()
